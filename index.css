/* CSS: Cascading Style Sheets                                                                                  */
/*    Каскадные таблицы стилей                                                                                  */
/* язык иерархических правил (таблиц стилей)                                                                    */
/* используемый для представления внешнего вида документа, написанного на HTML.                                 */

/* CSS - отвечает за стилизацию веб-страниц:                                                                    */
/* Цвета, Шрифты, Расположение элементов,                                                                       */
/* Анимации и другие визуальные эффекты.                                                                        */

/* ------------------------------------------------                                                             */

/* Анатомия набора правил CSS                                                                                   */

/* selector */
/*    p    {                                                                                                    */
/*             color:   red ;                                                                                   */
/*            |_____|   |_|                                                                                     */
/*            Property  Property value                                                                          */
/*            Свойство  Свойство значение                                                                       */

/* ------------------------------------------------                                                             */

/* Есть много видов селекторов, основные из них это:                                                            */

/* 1. Селектор элемента - p выбирает <p>                                                                        */
/* 2. ID селектор - #my-id выбирает <p id="my-id">                                                              */
/* 3. Селектор класса - .my-class выбирает <p class="my-class">                                                 */
/* 4. Селектор атрибута - img[src] выбирает <img src="myimg.png"> но не img                                     */
/* 5. Селектор псевдокласса - a:hover выбирает <a>, только при наведении                                        */
/* 6. Селектор псевдоэлемента - p::after добавляет контент после <p>                                            */
/* 7. Комбинаторы - p > span (выбирает span только внутри p) и p + span (выбирает span сразу после p)           */

/* ------------------------------------------------                                                             */

/* Шрифты и текст:                                                                                              */
/* font-family: определяет набор шрифтов, которые можно использовать                                            */
/* font-size: задаёт размер текста, например, в px, em или rem                                                  */
/* line-height: регулирует расстояние между строками текста                                                     */
/* font-weight: определяет толщину шрифта (normal, bold, 100–900)                                               */
/* text-align: выравнивание текста (left, center, right, justify)                                               */
/* text-transform: преобразование текста (uppercase, lowercase, capitalize)                                     */

/* Пример подключения Google Fonts:                                                                             */
/* В <head> вашего HTML-документа добавьте:                                                                     */
/* <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">     */

/* CSS - основан на блочной модели (box-model).                                                                 */
/* Каждый из блоков, занимающий пространство на вашей странице, имеет такие свойства как:                       */
/* content - это сам контент (текст или изображение)                                                            */
/* padding - пространство только вокруг контента                                                                */
/* border - граница вокруг padding                                                                              */
/* margin - пространство вокруг внешней стороны элемента                                                        */

/*       ----------------------------------------------------------                                             */
/*       |                                                        |                                             */
/*       |                                           margin       |                                             */
/*       |     ----------------------------border------------     |                                             */
/*       |     |                                            |     |                                             */
/*       |     |                                            |     |                                             */
/*       |     |                           padding          |     |                                             */
/*       |     |                                            |     |                                             */
/*       |     |      lorem ipsum dolor amet...             |     |                                             */
/*       |     |                                            |     |                                             */
/*       |     ----------------------------------------------     |                                             */
/*       |                                                        |                                             */
/*       |                                                        |                                             */
/*       ----------------------------------------------------------                                             */


/* width - ширина элемента                                                                                      */
/* background-color - цвет позади контента                                                                      */
/* color - цвет текста                                                                                          */
/* text-shadow - устанавливает тень для текста                                                                  */
/* display - устанавливает способ отображения (block, inline, flex, grid и др.)                                 */
/* visibility - контролирует видимость (visible, hidden)                                                        */

/* Пример центрирования элемента:                                                                               */
/* img {                                                                                                        */
/*      display: block;                                                                                         */
/*      margin: 0 auto;                                                                                         */
/* }                                                                                                            */

/* ------------------------------------------------                                                             */

/* Свойство position определяет способ позиционирования элементов:                                              */
/* 1. static - (по умолчанию) элемент остаётся в нормальном потоке документа                                    */
/* 2. relative - позиционируется относительно собственного нормального положения (top, right, bottom, left)     */
/* 3. absolute - позиционируется относительно ближайшего родительского элемента с position, отличным от static  */
/* 4. fixed - позиционируется относительно окна браузера и не двигается при прокрутке                           */
/* 5. sticky - комбинирует relative и fixed (позиция становится фиксированной при скролле)                      */

/* ------------------------------------------------                                                             */

/* Уровни элементов: z-index                                                                                    */
/* z-index управляет наложением элементов на оси Z (вперёд/назад).                                              */
/* Элемент с большим z-index будет отображаться поверх элементов с меньшим значением z-index.                   */

/* ------------------------------------------------                                                             */

/* Переполнение (overflow):                                                                                     */
/* overflow: visible; - контент виден за границами блока (по умолчанию)                                         */
/* overflow: hidden; - скрывает контент, выходящий за границы блока                                             */
/* overflow: scroll; - всегда показывает полосы прокрутки                                                       */
/* overflow: auto; - добавляет полосы прокрутки только при необходимости                                        */

/* ------------------------------------------------                                                             */

/* Плавающие элементы (float):                                                                                  */
/* float: left; - элемент выравнивается слева                                                                   */
/* float: right; - элемент выравнивается справа                                                                 */
/* clear: both; - используется для предотвращения обтекания плавающих элементов                                 */
/* Примечание: float устарел и редко используется в современных проектах                                        */

/* ------------------------------------------------                                                             */

/* Современные альтернативы: flexbox и grid для создания сложных макетов.                                       */

/* ------------------------------------------------                                                             */


/* Flexbox и Grid Layout:                                                                                       */
/* Flexbox - используется для распределения элементов в одном направлении (горизонтально и вертикально). */

/* Основные свойства контейнера (родителя): */

.container {
   display: flex;  /* Включает Flexbox на контейнере */
   justify-content: space-between;  /* Распределение элементов по горизонтали */
   align-items: center;  /* Выравнивание элементов по вертикали */
   flex-direction: row;  /* Ориентация элементов (row - горизонтально, column - вертикально) */
   flex-wrap: wrap;  /* Разрешение на перенос элементов на новую строку */
}

/* Основные свойства элементов (детей): */
.item {
   flex: 1;  /* Определяет гибкость элемента (занимает доступное пространство) */
   margin: 10px;  /* Отступы между элементами */
   align-self: flex-start;  /* Позиционирование элемента в вертикальном направлении (отличное от align-items) */
}

/* ------------------------------------------------                                                             */

/* Grid Layout - используется для создания более сложных макетов с сеткой из рядов и колонок. */

/* Основные свойства контейнера (родителя): */
.grid-container {
   display: grid;  /* Включает Grid на контейнере */
   grid-template-columns: repeat(3, 1fr);  /* 3 равные колонки */
   grid-template-rows: repeat(3, 100px);  /* 3 строки по 100px */
   gap: 10px;  /* Пробел между ячейками */
}

/* Основные свойства элементов (детей): */
.grid-item {
   background-color: #f0f0f0;  /* Устанавливает фоновый цвет для элементов сетки */
   padding: 20px;  /* Добавляет внутренние отступы внутри элемента */
   text-align: center;  /* Выравнивает текст по центру внутри элемента */
}

/* ------------------------------------------------                                                             */

/* Пример для использования медиазапросов */
@media (max-width: 600px) {
   .container {
      flex-direction: column;  /* Переводим элементы в колонку для маленьких экранов */
   }
}


/* ------------------------------------------------                                                             */

/* Анимации:                                                                                                    */
/* Используйте keyframes для создания анимаций.                                                                 */
/* Пример:                                                                                                      */
/* @keyframes fade-in {                                                                                         */
/*     from { opacity: 0; }                                                                                     */
/*     to { opacity: 1; }                                                                                       */
/* }                                                                                                            */
/* div {                                                                                                        */
/*     animation: fade-in 1s ease-in;                                                                           */
/* }                                                                                                            */

/* ------------------------------------------------                                                             */

/* Медиа запросы (Media Queries):                                                                               */
/* Позволяют адаптировать стили под разные устройства.                                                          */
/* Пример:                                                                                                      */
/* @media (max-width: 600px) {                                                                                  */
/*     body { background-color: lightgray; }                                                                    */
/* }                                                                                                            */

/* ------------------------------------------------                                                             */

/* Переменные CSS:                                                                                              */
/* Используются для удобства работы с повторяющимися значениями.                                                */
/* Пример:                                                                                                      */
/* :root {                                                                                                      */
/*     --main-color: #3498db;                                                                                   */
/* }                                                                                                            */
/* h1 { color: var(--main-color); }                                                                             */

/* ------------------------------------------------                                                             */

/* Псевдоэлементы:                                                                                              */
/* Используются для добавления декоративного контента без изменения HTML.                                       */
/* Пример:                                                                                                      */
/* h1::after {                                                                                                  */
/*     content: '*';                                                                                            */
/*     color: red;                                                                                              */
/* }                                                                                                            */

/* ------------------------------------------------                                                             */

/* Управление тенями:                                                                                           */
/* Используйте text-shadow для текста и box-shadow для блоков.                                                  */
/* Пример:                                                                                                      */
/* button {                                                                                                     */
/*     box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);                                                              */
/* }                                                                                                            */

/* ------------------------------------------------                                                             */

/* Трансформации (transform):                                                                                   */
/* Используются для изменения положения, размера и других свойств элемента.                                     */
/* Пример:                                                                                                      */
/* button:hover {                                                                                               */
/*     transform: scale(1.1);                                                                                   */
/* }                                                                                                            */

/* ------------------------------------------------                                                             */

/* Переходы (transition):                                                                                       */
/* Делают изменения свойств плавными.                                                                           */
/* Пример:                                                                                                      */
/* button {                                                                                                     */
/*     transition: background-color 0.3s ease;                                                                  */
/* }                                                                                                            */
/* button:hover {                                                                                               */
/*     background-color: #2ecc71;                                                                               */
/* }                                                                                                            */

/* ------------------------------------------------                                                             */



/* Список вопросов и ответов для собеседования junior frontend developer: */

/* 1. Что такое CSS и для чего он используется? */
/* Ответ: CSS (Cascading Style Sheets) используется для стилизации веб-страниц, управления цветами, шрифтами, макетами, анимациями и другими визуальными эффектами. */

/* 2. Что такое блочная модель CSS (Box Model)? */
/* Ответ: Блочная модель включает в себя контент, внутренний отступ (padding), границу (border) и внешний отступ (margin). Это структура, которая определяет, как элемент занимает место на странице. */

/* 3. Какие есть основные типы селекторов в CSS? */
/* Ответ:
   - Селектор элемента (например, p)
   - Селектор класса (.class)
   - Селектор ID (#id)
   - Селектор атрибута ([attr])
   - Псевдоклассы (:hover, :focus)
   - Псевдоэлементы (::before, ::after)
   - Комбинаторы (например, p > span) */

/* 4. В чём разница между relative, absolute, fixed и sticky позиционированием? */
/* Ответ:
   - relative: Смещает элемент относительно его нормального положения.
   - absolute: Смещает элемент относительно ближайшего предка с заданным position, отличным от static.
   - fixed: Закрепляет элемент относительно окна браузера, игнорируя прокрутку.
   - sticky: Ведёт себя как relative, пока не достигает заданного смещения, после чего закрепляется как fixed. */

/* 5. Что такое псевдоклассы и псевдоэлементы? */
/* Ответ:
   - Псевдоклассы добавляют состояние элементу, например :hover, :focus.
   - Псевдоэлементы добавляют стилизацию к частям элемента, например ::before, ::after. */

/* 6. Как работают медиазапросы? */
/* Ответ: Медиазапросы адаптируют стили под определённые размеры экрана или устройства, используя директиву @media. */

/* 7. Что такое Flexbox и для чего он используется? */
/* Ответ: Flexbox — это модель расположения элементов, которая обеспечивает гибкое выравнивание и распределение элементов в одном измерении (по строке или столбцу). Используется для создания адаптивных и сложных макетов. */

/* 8. Как работает CSS Grid? */
/* Ответ: CSS Grid — это система для создания макетов, которая позволяет выравнивать элементы по сетке с использованием строк и столбцов. Она используется для сложных макетов, которые требуют управления как по горизонтали, так и по вертикали. */

/* 9. Чем отличаются "em", "rem" и "px"? */
/* Ответ:
   - px: фиксированная единица, основанная на пикселях экрана.
   - em: относительная единица, основанная на размере шрифта родительского элемента.
   - rem: относительная единица, основанная на размере шрифта корневого элемента (html). */

/* 10. Что такое z-index и как он работает? */
/* Ответ: z-index управляет наложением элементов по оси Z (вперёд/назад). Элементы с большим z-index отображаются поверх элементов с меньшим z-index. */

/* 11. Как добавить пользовательский шрифт в проект? */
/* Ответ: Используйте @font-face для локального шрифта или подключите шрифты из Google Fonts с помощью <link> в <head>. */

/* 12. Как сделать элемент центрированным в CSS? */
/* Ответ:
   - Для текста: text-align: center;
   - Для блоков: margin: auto; или использование flexbox/grid. */

/* 13. Чем отличается "visibility: hidden" от "display: none"? */
/* Ответ:
   - visibility: hidden; делает элемент невидимым, но сохраняет место на странице.
   - display: none; полностью удаляет элемент из потока, освобождая занимаемое пространство. */
